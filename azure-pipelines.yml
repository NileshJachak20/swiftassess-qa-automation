# Azure DevOps Pipeline for SwiftAssess QA Automation
# Comprehensive test suite including functional, device, and load tests

trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
  paths:
    exclude:
      - README.md
      - docs/**

pr:
  branches:
    include:
      - main
      - develop

variables:
  pythonVersion: '3.11'
  nodeVersion: '16.x'
  testEnv: 'staging'
  browser: 'chrome'
  headless: 'true'
  
pool:
  vmImage: 'windows-latest'

stages:
  # ============================================================================
  # Stage 1: Setup and Code Quality
  # ============================================================================
  - stage: Setup
    displayName: 'Setup & Code Quality'
    jobs:
      - job: Setup_Environment
        displayName: 'Setup Build Environment'
        steps:
          - checkout: self
            displayName: 'Checkout Source Code'
            
          - task: UsePythonVersion@0
            displayName: 'Use Python $(pythonVersion)'
            inputs:
              versionSpec: '$(pythonVersion)'
              addToPath: true
              
          - task: NodeTool@0
            displayName: 'Use Node.js $(nodeVersion)'
            inputs:
              versionSpec: '$(nodeVersion)'
              
          - script: |
              python --version
              pip --version
              node --version
              npm --version
            displayName: 'Display Versions'
            
          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            displayName: 'Install Python Dependencies'
            
          - script: |
              npm install
            displayName: 'Install Node.js Dependencies'
            
          - script: |
              pip install pylint black || echo "Code quality tools installation attempted"
            displayName: 'Install Code Quality Tools'
            continueOnError: true
            
          - script: |
              pylint tests/ --disable=C0114,C0116 --exit-zero
            displayName: 'Run Pylint'
            continueOnError: true
            
          - script: |
              black --check tests/ || echo "Black formatting check completed"
            displayName: 'Run Black Format Check'
            continueOnError: true

  # ============================================================================
  # Stage 2: Functional Tests
  # ============================================================================
  - stage: Functional_Tests
    displayName: 'Functional Tests'
    dependsOn: Setup
    jobs:
      # Smoke Tests Job
      - job: Smoke_Tests
        displayName: 'Smoke Tests'
        timeoutInMinutes: 30
        steps:
          - checkout: self
            
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
              
          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            displayName: 'Install Dependencies'
            
          - script: |
              pytest tests/functional/ -m smoke --browser=chrome --headless ^
                --html=reports/smoke_test_report.html ^
                --self-contained-html ^
                --json-report ^
                --json-report-file=reports/smoke_results.json ^
                --alluredir=reports/allure-results/smoke ^
                -v
            displayName: 'Run Smoke Tests'
            continueOnError: true
            
          - task: PublishTestResults@2
            displayName: 'Publish Smoke Test Results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'reports/smoke_results.json'
              testRunTitle: 'Smoke Tests'
              
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Smoke Test Reports'
            condition: always()
            inputs:
              targetPath: 'reports'
              artifact: 'smoke-test-reports'
              
      # Regression Tests Job
      - job: Regression_Tests
        displayName: 'Regression Tests'
        timeoutInMinutes: 60
        steps:
          - checkout: self
            
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
              
          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            displayName: 'Install Dependencies'
            
          - script: |
              pytest tests/functional/ -m regression --browser=chrome --headless ^
                --html=reports/regression_test_report.html ^
                --self-contained-html ^
                --json-report ^
                --json-report-file=reports/regression_results.json ^
                --alluredir=reports/allure-results/regression ^
                -v
            displayName: 'Run Regression Tests'
            continueOnError: true
            
          - task: PublishTestResults@2
            displayName: 'Publish Regression Test Results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'reports/regression_results.json'
              testRunTitle: 'Regression Tests'
              
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Regression Test Reports'
            condition: always()
            inputs:
              targetPath: 'reports'
              artifact: 'regression-test-reports'
              
      # All Functional Tests Job
      - job: All_Functional_Tests
        displayName: 'All Functional Tests'
        timeoutInMinutes: 60
        steps:
          - checkout: self
            
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
              
          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            displayName: 'Install Dependencies'
            
          - script: |
              pytest tests/functional/ -m functional --browser=chrome --headless ^
                --html=reports/functional_test_report.html ^
                --self-contained-html ^
                --json-report ^
                --json-report-file=reports/functional_results.json ^
                --alluredir=reports/allure-results/functional ^
                -v
            displayName: 'Run All Functional Tests'
            continueOnError: true
            
          - task: PublishTestResults@2
            displayName: 'Publish Functional Test Results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'reports/functional_results.json'
              testRunTitle: 'All Functional Tests'
              
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Functional Test Reports'
            condition: always()
            inputs:
              targetPath: 'reports'
              artifact: 'functional-test-reports'
              
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Screenshots'
            condition: always()
            inputs:
              targetPath: 'screenshots'
              artifact: 'functional-screenshots'

  # ============================================================================
  # Stage 3: Device Compatibility Tests
  # ============================================================================
  - stage: Device_Tests
    displayName: 'Device Compatibility Tests'
    dependsOn: Setup
    jobs:
      # Desktop Browser Tests Job
      - job: Desktop_Tests
        displayName: 'Desktop Browser Tests'
        timeoutInMinutes: 45
        steps:
          - checkout: self
            
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
              
          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            displayName: 'Install Dependencies'
            
          - script: |
              pytest tests/device/test_device_compatibility.py::TestDeviceCompatibility::test_desktop_chrome_compatibility ^
                --html=reports/desktop_chrome_report.html ^
                --self-contained-html ^
                --json-report ^
                --json-report-file=reports/desktop_chrome_results.json ^
                -v
            displayName: 'Run Desktop Chrome Tests'
            continueOnError: true
            
          - script: |
              pytest tests/device/test_device_compatibility.py::TestDeviceCompatibility::test_desktop_firefox_compatibility ^
                --html=reports/desktop_firefox_report.html ^
                --self-contained-html ^
                --json-report ^
                --json-report-file=reports/desktop_firefox_results.json ^
                -v
            displayName: 'Run Desktop Firefox Tests'
            continueOnError: true
            
          - script: |
              pytest tests/device/test_device_compatibility.py::TestDeviceCompatibility::test_desktop_edge_compatibility ^
                --html=reports/desktop_edge_report.html ^
                --self-contained-html ^
                --json-report ^
                --json-report-file=reports/desktop_edge_results.json ^
                -v
            displayName: 'Run Desktop Edge Tests'
            continueOnError: true
            
          - task: PublishTestResults@2
            displayName: 'Publish Desktop Test Results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'reports/desktop_*_results.json'
              testRunTitle: 'Desktop Browser Tests'
              
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Desktop Test Reports'
            condition: always()
            inputs:
              targetPath: 'reports'
              artifact: 'desktop-test-reports'
              
      # Mobile Device Tests Job
      - job: Mobile_Tests
        displayName: 'Mobile Device Tests'
        timeoutInMinutes: 45
        steps:
          - checkout: self
            
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
              
          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            displayName: 'Install Dependencies'
            
          - script: |
              pytest tests/device/test_device_compatibility.py::TestDeviceCompatibility::test_mobile_iphone_compatibility ^
                --html=reports/mobile_iphone_report.html ^
                --self-contained-html ^
                --json-report ^
                --json-report-file=reports/mobile_iphone_results.json ^
                -v
            displayName: 'Run Mobile iPhone Tests'
            continueOnError: true
            
          - script: |
              pytest tests/device/test_device_compatibility.py::TestDeviceCompatibility::test_mobile_android_compatibility ^
                --html=reports/mobile_android_report.html ^
                --self-contained-html ^
                --json-report ^
                --json-report-file=reports/mobile_android_results.json ^
                -v
            displayName: 'Run Mobile Android Tests'
            continueOnError: true
            
          - script: |
              pytest tests/device/test_device_compatibility.py::TestDeviceCompatibility::test_touch_interactions ^
                --html=reports/touch_interactions_report.html ^
                --self-contained-html ^
                --json-report ^
                --json-report-file=reports/touch_interactions_results.json ^
                -v
            displayName: 'Run Touch Interactions Tests'
            continueOnError: true
            
          - script: |
              pytest tests/device/test_device_compatibility.py::TestDeviceCompatibility::test_mobile_keyboard_handling ^
                --html=reports/mobile_keyboard_report.html ^
                --self-contained-html ^
                --json-report ^
                --json-report-file=reports/mobile_keyboard_results.json ^
                -v
            displayName: 'Run Mobile Keyboard Tests'
            continueOnError: true
            
          - task: PublishTestResults@2
            displayName: 'Publish Mobile Test Results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'reports/mobile_*_results.json'
              testRunTitle: 'Mobile Device Tests'
              
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Mobile Test Reports'
            condition: always()
            inputs:
              targetPath: 'reports'
              artifact: 'mobile-test-reports'
              
      # Tablet Device Tests Job
      - job: Tablet_Tests
        displayName: 'Tablet Device Tests'
        timeoutInMinutes: 45
        steps:
          - checkout: self
            
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
              
          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            displayName: 'Install Dependencies'
            
          - script: |
              pytest tests/device/test_device_compatibility.py::TestDeviceCompatibility::test_tablet_ipad_compatibility ^
                --html=reports/tablet_ipad_report.html ^
                --self-contained-html ^
                --json-report ^
                --json-report-file=reports/tablet_ipad_results.json ^
                -v
            displayName: 'Run Tablet iPad Tests'
            continueOnError: true
            
          - task: PublishTestResults@2
            displayName: 'Publish Tablet Test Results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'reports/tablet_*_results.json'
              testRunTitle: 'Tablet Device Tests'
              
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Tablet Test Reports'
            condition: always()
            inputs:
              targetPath: 'reports'
              artifact: 'tablet-test-reports'
              
      # Responsive Design Tests Job
      - job: Responsive_Tests
        displayName: 'Responsive Design Tests'
        timeoutInMinutes: 45
        steps:
          - checkout: self
            
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
              
          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            displayName: 'Install Dependencies'
            
          - script: |
              pytest tests/device/test_device_compatibility.py::TestDeviceCompatibility::test_responsive_design_validation ^
                --html=reports/responsive_design_report.html ^
                --self-contained-html ^
                --json-report ^
                --json-report-file=reports/responsive_design_results.json ^
                -v
            displayName: 'Run Responsive Design Tests'
            continueOnError: true
            
          - script: |
              pytest tests/device/test_device_compatibility.py::TestDeviceCompatibility::test_cross_browser_consistency ^
                --html=reports/cross_browser_report.html ^
                --self-contained-html ^
                --json-report ^
                --json-report-file=reports/cross_browser_results.json ^
                -v
            displayName: 'Run Cross-Browser Consistency Tests'
            continueOnError: true
            
          - task: PublishTestResults@2
            displayName: 'Publish Responsive Test Results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'reports/*_results.json'
              testRunTitle: 'Responsive Design Tests'
              
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Responsive Test Reports'
            condition: always()
            inputs:
              targetPath: 'reports'
              artifact: 'responsive-test-reports'
              
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Device Screenshots'
            condition: always()
            inputs:
              targetPath: 'screenshots'
              artifact: 'device-screenshots'

  # ============================================================================
  # Stage 4: Load/Performance Tests
  # ============================================================================
  - stage: Load_Tests
    displayName: 'Load & Performance Tests'
    dependsOn: 
      - Functional_Tests
      - Device_Tests
    condition: |
      and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          eq(variables['Build.SourceBranch'], 'refs/heads/develop'),
          eq(variables['Build.Reason'], 'PullRequest')
        )
      )
    jobs:
      # Baseline Load Tests
      - job: Baseline_Load_Test
        displayName: 'Baseline Load Test (10 users)'
        timeoutInMinutes: 15
        steps:
          - checkout: self
            
          - task: NodeTool@0
            inputs:
              versionSpec: '$(nodeVersion)'
              
          - script: |
              npm install
            displayName: 'Install Dependencies'
            
          - script: |
              npm run load:baseline
            displayName: 'Run Baseline Load Test'
            continueOnError: true
            
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Baseline Load Test Results'
            condition: always()
            inputs:
              targetPath: 'reports'
              artifact: 'baseline-load-test-reports'
              
      # Stress Load Tests
      - job: Stress_Load_Test
        displayName: 'Stress Load Test (500 users)'
        timeoutInMinutes: 20
        steps:
          - checkout: self
            
          - task: NodeTool@0
            inputs:
              versionSpec: '$(nodeVersion)'
              
          - script: |
              npm install
            displayName: 'Install Dependencies'
            
          - script: |
              npm run load:stress
            displayName: 'Run Stress Load Test'
            continueOnError: true
            
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Stress Load Test Results'
            condition: always()
            inputs:
              targetPath: 'reports'
              artifact: 'stress-load-test-reports'
              
      # Spike Load Tests
      - job: Spike_Load_Test
        displayName: 'Spike Load Test (1000 users)'
        timeoutInMinutes: 15
        steps:
          - checkout: self
            
          - task: NodeTool@0
            inputs:
              versionSpec: '$(nodeVersion)'
              
          - script: |
              npm install
            displayName: 'Install Dependencies'
            
          - script: |
              npm run load:spike
            displayName: 'Run Spike Load Test'
            continueOnError: true
            
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Spike Load Test Results'
            condition: always()
            inputs:
              targetPath: 'reports'
              artifact: 'spike-load-test-reports'

  # ============================================================================
  # Stage 5: Report Generation & Publishing
  # ============================================================================
  - stage: Reports
    displayName: 'Generate & Publish Reports'
    dependsOn: 
      - Functional_Tests
      - Device_Tests
      - Load_Tests
    condition: always()
    jobs:
      - job: Generate_Reports
        displayName: 'Generate Comprehensive Reports'
        steps:
          - checkout: self
            
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
              
          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            displayName: 'Install Dependencies'
            
          # Download all artifacts from previous stages
          - task: DownloadPipelineArtifact@2
            displayName: 'Download All Test Artifacts'
            inputs:
              buildType: 'current'
              targetPath: '$(Pipeline.Workspace)/artifacts'
            continueOnError: true
            
          - script: |
              python scripts/generate_combined_report.py
            displayName: 'Generate Combined Report'
            continueOnError: true
            
          - script: |
              python scripts/generate_bug_report.py
            displayName: 'Generate Bug Report'
            continueOnError: true
            
          # Generate Allure Report (if allure is available)
          - script: |
              npm install -g allure-commandline
              allure generate reports/allure-results --clean -o reports/allure-report
            displayName: 'Generate Allure Report'
            continueOnError: true
            
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Combined Reports'
            condition: always()
            inputs:
              targetPath: 'reports'
              artifact: 'combined-reports'
              
          - task: PublishPipelineArtifact@1
            displayName: 'Publish All Screenshots'
            condition: always()
            inputs:
              targetPath: 'screenshots'
              artifact: 'all-screenshots'
              
          # Create and publish test summary
          - script: |
              echo # SwiftAssess QA Automation Test Summary > test_summary.md
              echo. >> test_summary.md
              echo ## Build Information >> test_summary.md
              echo - Build Number: $(Build.BuildNumber) >> test_summary.md
              echo - Build ID: $(Build.BuildId) >> test_summary.md
              echo - Branch: $(Build.SourceBranchName) >> test_summary.md
              echo - Commit: $(Build.SourceVersion) >> test_summary.md
              echo - Triggered By: $(Build.RequestedFor) >> test_summary.md
              echo. >> test_summary.md
              echo ## Test Stages >> test_summary.md
              echo - ✅ Setup & Code Quality >> test_summary.md
              echo - ✅ Functional Tests (Smoke, Regression, All) >> test_summary.md
              echo - ✅ Device Tests (Desktop, Mobile, Tablet, Responsive) >> test_summary.md
              echo - ✅ Load Tests (Baseline, Stress, Spike) >> test_summary.md
              echo - ✅ Report Generation >> test_summary.md
              echo. >> test_summary.md
              echo ## Artifacts Published >> test_summary.md
              echo - Smoke Test Reports >> test_summary.md
              echo - Regression Test Reports >> test_summary.md
              echo - Functional Test Reports >> test_summary.md
              echo - Desktop Test Reports >> test_summary.md
              echo - Mobile Test Reports >> test_summary.md
              echo - Tablet Test Reports >> test_summary.md
              echo - Responsive Test Reports >> test_summary.md
              echo - Load Test Reports (Baseline, Stress, Spike) >> test_summary.md
              echo - Combined Reports >> test_summary.md
              echo - Screenshots >> test_summary.md
              echo. >> test_summary.md
              echo ## View Reports >> test_summary.md
              echo Navigate to the Artifacts section to download and view all test reports. >> test_summary.md
            displayName: 'Create Test Summary'
            
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Test Summary'
            inputs:
              targetPath: 'test_summary.md'
              artifact: 'test-summary'

  # ============================================================================
  # Stage 6: Notification & Cleanup
  # ============================================================================
  - stage: Notification
    displayName: 'Notification & Cleanup'
    dependsOn: 
      - Reports
    condition: always()
    jobs:
      - job: Send_Notifications
        displayName: 'Send Build Notifications'
        steps:
          - script: |
              echo Pipeline execution completed for Build $(Build.BuildNumber)
              echo Branch: $(Build.SourceBranchName)
              echo Status: $(Agent.JobStatus)
            displayName: 'Display Build Status'
            
          # Note: Email notifications should be configured in Azure DevOps Project Settings
          # under Notifications to send emails on build completion/failure

